# generated by datamodel-codegen:
#   filename:  sample_indicators.json
#   timestamp: 2022-05-08T04:31:25+00:00
# modified manually for the descriptions

from __future__ import annotations

from pydantic import BaseModel, Field
from typing import Any, List, Optional


class IndicatorItem(BaseModel):
    code: str
    label: str
    uri: str


class AcronymItem(BaseModel):
    acronym: str
    expansion: str


class LicenseItem(BaseModel):
    name: List[str]
    uri: List[str]


class GeographicUnit(BaseModel):
    name: str = Field(None, description='Name of the geographic unit e.g. "World", "Africa", "Afghanistan", "OECD countries", "Bangkok".')
    code: str = Field(None, description="Code of the geographic unit. The ISO 3166-1 alpha-3 code is preferred when the unit is a country.")
    type: str = Field(None, description='Type of geographic unit e.g. "country", "state", "region", "province", "city", etc.')


class TimePeriod(BaseModel):
    start: List[str]
    end: List[str]


class Keyword(BaseModel):
    name: List[str]


class DefinitionReference(BaseModel):
    uri: List[str]


class ApiDocumentation(BaseModel):
    description: List[str]
    uri: List[str]


class Topic(BaseModel):
    id: List[str]
    name: List[str]
    vocabulary: List[str]


class SeriesDescription(BaseModel):
    idno: List[str]
    name: List[str]
    database_id: str
    measurement_unit: List[str]
    periodicity: List[str]
    base_period: List[Any]  # missing in schema
    # definition_short: List[str]  # not in script
    definition_references: List[DefinitionReference]

    definition_long: List[str]  # missing in schema

    methodology: List[str]
    limitation: List[str]
    topics: List[Topic]
    relevance: List[str]
    time_periods: List[TimePeriod]
    geographic_units: List[GeographicUnit]
    license: List[LicenseItem]
    api_documentation: ApiDocumentation

    # source: str  # not in script
    keywords: List[Keyword]

    # acronyms: List[AcronymItem]  # not in script
    # related_indicators: List[IndicatorItem]  # not in script
    # framework: List[Any]  # not in script

    imputation: List[Any]  # missing in schema
    missing: List[Any]  # missing in schema
    quality_checks: List[Any]  # missing in schema
    quality_note: List[Any]  # missing in schema
    series_break: List[Any]  # missing in schema
    aggregation_method: List[Any]  # missing in schema
    aliases: List  # missing in schema


class IndicatorsSchema(BaseModel):
    series_description: SeriesDescription
